import static com.mongodb.client.model.Filters.eq;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import json.User;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class DAO {
	static Map<String, User> userList = new HashMap<String, User>();
	static MongoClient mongoClient;
	static MongoDatabase db;
	static MongoCollection<BasicDBObject> coll;
	static Gson gson;

	/**
	 * connects to MongoClient, gets Database connector, gets reference to
	 * collection
	 * 
	 */
	DAO() {
		mongoClient = new MongoClient("localhost", 27017);
		db = mongoClient.getDatabase("UserDatabase");
		coll = db.getCollection("Users", BasicDBObject.class);
		gson = new Gson();
	}

	/**
	 * gets all the users from collection, called from reponseGetAllUser()
	 * method from Model
	 * 
	 */
	public String getAllUsers() {
		FindIterable<BasicDBObject> iterable = coll.find();
		StringBuilder sb = new StringBuilder();
		iterable.forEach(new Block<BasicDBObject>() {
			@Override
			public void apply(BasicDBObject obj) {
				// TODO Auto-generated method stub
				JsonObject json = (JsonObject) new JsonParser().parse(obj
						.toJson());
				sb.append(json.toString());
			}
		});
		return sb.toString();

	}

	/**
	 * Update the existing user in the database
	 * 
	 */
	public void UpdateUser(User user) {

		BasicDBObjectBuilder company = BasicDBObjectBuilder.start()
				.add("name", user.getCompany().getName())
				.add("website", user.getCompany().getWebsite());

		BasicDBObjectBuilder address = BasicDBObjectBuilder.start()
				.add("street", user.getAddress().getStreet())
				.add("city", user.getAddress().getCity())
				.add("zip", user.getAddress().getZip())
				.add("state", user.getAddress().getState())
				.add("country", user.getAddress().getCountry());

		BasicDBObjectBuilder userData = BasicDBObjectBuilder.start()
				.add("firstName", user.getFirstName())
				.add("lastName", user.getLastName())
				.add("email", user.getEmail()).add("address", address.get())
				.add("dateCreated", user.getDateCreated())
				.add("company", company.get())
				.add("profilePic", user.getProfilePic());

		coll.replaceOne(eq("email", user.getEmail()),
				(BasicDBObject) userData.get());
	}

	/**
	 * Stores new user in the database
	 * 
	 */
	public void storeInDatabase(User user) {

		BasicDBObjectBuilder company = BasicDBObjectBuilder.start()
				.add("name", user.getCompany().getName())
				.add("website", user.getCompany().getWebsite());

		BasicDBObjectBuilder address = BasicDBObjectBuilder.start()
				.add("street", user.getAddress().getStreet())
				.add("city", user.getAddress().getCity())
				.add("zip", user.getAddress().getZip())
				.add("state", user.getAddress().getState())
				.add("country", user.getAddress().getCountry());

		BasicDBObjectBuilder userData = BasicDBObjectBuilder.start()
				.add("_id", user.getId()).add("firstName", user.getFirstName())
				.add("lastName", user.getLastName())
				.add("email", user.getEmail()).add("address", address.get())
				.add("dateCreated", user.getDateCreated())
				.add("company", company.get())
				.add("profilePic", user.getProfilePic());

		coll.insertOne((BasicDBObject) userData.get());
	}

	/**
	 * Check whether the given user exists, based on email address as id is
	 * generated by the application
	 * 
	 */
	public boolean userExist(User current) {
		FindIterable<BasicDBObject> iterable = coll.find(eq("email",
				current.getEmail()));
		ArrayList<String> list = new ArrayList<String>();
		iterable.forEach(new Block<BasicDBObject>() {
			@Override
			public void apply(BasicDBObject obj) {
				// TODO Auto-generated method stub
				list.add(obj.toJson());

			}
		});
		if (list == null || list.size() == 0)
			return false;
		return true;
	}

}
